# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
    config.vm.define "server0" do |subconfig|
        subconfig.vm.box = "ubuntu/bionic64"
        subconfig.vm.hostname = "server0"

        # Internal network.
        subconfig.vm.network "private_network", ip: "192.168.1.1", virtualbox__intnet: "intnet1"
        subconfig.vm.network "private_network", ip: "192.168.2.1", netmask: "25", virtualbox__intnet: "intnet2"
#
        # Bridged adapter.
#        config.vm.network "public_network", bridge: "wlp3s0"

        subconfig.vm.provider "virtualbox" do |v|
            v.name = "server0"
        end
    end

    config.vm.define "server1" do |subconfig|
        subconfig.vm.box = "ubuntu/bionic64"
        subconfig.vm.hostname = "server1"

        subconfig.vm.network "private_network", ip: "192.168.1.100", virtualbox__intnet: "intnet1"

        subconfig.vm.provision "shell", run: "always", inline: "route add default gw 192.168.1.1"

        subconfig.vm.provider "virtualbox" do |v|
            v.name = "server1"
        end
    end

    config.vm.define "server2" do |subconfig|
        subconfig.vm.box = "ubuntu/bionic64"
        subconfig.vm.hostname = "server2"

        subconfig.vm.network "private_network", ip: "192.168.2.100", netmask: "25", virtualbox__intnet: "intnet2"

        subconfig.vm.provision "shell", run: "always", inline: "route add default gw 192.168.2.1"

        subconfig.vm.provider "virtualbox" do |v|
            v.name = "server2"
        end
    end

#    (0..0).each do |i|
#        vb_name = "server#{i}"
#
#        config.vm.define vb_name do |subconfig|
#            subconfig.vm.box = "ubuntu/bionic64"
#            subconfig.vm.hostname = vb_name
#
#            config.vm.network "private_network", ip: "192.168.1.1", virtualbox__intnet: "intnet1"
#            config.vm.network "private_network", ip: "192.168.2.1", virtualbox__intnet: "intnet2"
#
#            config.vm.provider "virtualbox" do |v|
#                v.name = vb_name
#            end
#
#        end
#    end
end

